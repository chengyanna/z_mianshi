/**
 * 
 */
package com.nokia.jvm.oom;

import java.nio.ByteBuffer;

/**
 * @author yanachen
 * @create 2020-01-31 19:37:18
 * 高频考点
 * 配置参数： -Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m
 * 
 * 故障现象：java.lang.OutOfMemoryError: Direct buffer memory
 * 
 * 导致原因：
 * 写NIO程序经常使用ByteBuffer来读取或者写入数据，这是一种基于通道（Channel)与缓冲区(Buffer)的I/O方式
 * 它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。
 * 这样能在一些场景中显著提高性能，因为避免了再Java堆和Native堆中来回复制数据。
 * ByteBuffer.allocate(capacity) 第一种方式是分配JVM堆内存，属于GC管辖范围，由于需要拷贝所以速度相对较慢
 * ByteBuffer.allocateDirect(capacity) 第二种方式是分配OS本地内存，不属于GC管辖范围，由于不需要拷贝所以速度相对较快
 * 但如果不断分配本地内存，堆内存很少使用，那么JVM不需要执行GC，DirectByteBuffer对象们就不会被回收
 * 这时候堆内存充足，但本地内存可能已经使用光了，再次尝试分配本地内存就会出现OutOfMemory,程序直接崩溃了。
 */
public class DirectBufferMemory {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("配置的MaxDirectMemory为"+sun.misc.VM.maxDirectMemory()/(double)1024/1024+"MB");//默认物理内存的1/4
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		//-XX:MaxDirectMemorySize=5m 我们配置为5MB，但实际使用6MB，故意使坏
		ByteBuffer bb=ByteBuffer.allocateDirect(60*1024*1024);
		bb.clear();

	}

}
